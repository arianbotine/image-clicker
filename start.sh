#!/bin/bash

# Script de Inicializa√ß√£o Autossuficiente do ImageClicker para Linux/macOS
# Este script prepara automaticamente todo o ambiente necess√°rio

set -e  # Para em caso de erro

echo "=========================================="
echo "üéØ IMAGECLICKER - INICIALIZADOR BASH"
echo "üîß MODO AUTOSSUFICIENTE"
echo "=========================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para verificar se um comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Fun√ß√£o para instalar pacotes no sistema
install_system_packages() {
    local packages="$1"
    echo -e "${BLUE}üì¶ Instalando pacotes do sistema: $packages${NC}"
    
    if command_exists apt-get; then
        # Ubuntu/Debian
        sudo apt-get update -qq
        sudo apt-get install -y $packages
    elif command_exists yum; then
        # CentOS/RHEL/Fedora
        sudo yum install -y $packages
    elif command_exists brew; then
        # macOS com Homebrew
        brew install $packages
    else
        echo -e "${RED}‚ùå Gerenciador de pacotes n√£o suportado${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è Instale manualmente: $packages${NC}"
        return 1
    fi
}

# Fun√ß√£o para verificar e instalar Python3
setup_python() {
    echo -e "${BLUE}üêç Verificando Python3...${NC}"
    
    if ! command_exists python3; then
        echo -e "${YELLOW}‚öôÔ∏è Python3 n√£o encontrado, instalando...${NC}"
        install_system_packages "python3 python3-pip"
    fi
    
    echo -e "${GREEN}‚úÖ Python3 encontrado: $(python3 --version)${NC}"
}

# Fun√ß√£o para verificar e instalar pip
setup_pip() {
    echo -e "${BLUE}üì¶ Verificando pip...${NC}"
    
    if ! command_exists pip3 && ! python3 -m pip --version >/dev/null 2>&1; then
        echo -e "${YELLOW}‚öôÔ∏è pip n√£o encontrado, instalando...${NC}"
        
        # Tenta instalar pip
        if command_exists apt-get; then
            sudo apt-get install -y python3-pip
        elif command_exists yum; then
            sudo yum install -y python3-pip
        else
            # Instala pip via get-pip.py como fallback
            echo -e "${BLUE}üì• Baixando e instalando pip...${NC}"
            curl -s https://bootstrap.pypa.io/get-pip.py | python3
        fi
    fi
    
    echo -e "${GREEN}‚úÖ pip encontrado${NC}"
}

# Fun√ß√£o para configurar depend√™ncias espec√≠ficas do sistema
setup_system_dependencies() {
    local OS=$(uname -s)
    echo -e "${BLUE}üñ•Ô∏è Configurando depend√™ncias para $OS...${NC}"
    
    case "$OS" in
        Linux*)
            echo -e "${BLUE}üêß Sistema Linux detectado${NC}"
            
            # Lista de depend√™ncias necess√°rias
            local missing_packages=""
            
            # Verifica scrot
            if ! command_exists scrot; then
                missing_packages="$missing_packages scrot"
            fi
            
            # Verifica tkinter
            if ! python3 -c "import tkinter" >/dev/null 2>&1; then
                missing_packages="$missing_packages python3-tk"
            fi
            
            # Verifica headers de desenvolvimento
            if ! dpkg -l | grep -q python3-dev; then
                missing_packages="$missing_packages python3-dev"
            fi
            
            # Instala pacotes necess√°rios
            if [ -n "$missing_packages" ]; then
                echo -e "${YELLOW}‚öôÔ∏è Instalando depend√™ncias do sistema:$missing_packages${NC}"
                install_system_packages "$missing_packages"
            fi
            
            echo -e "${GREEN}‚úÖ Depend√™ncias do sistema configuradas${NC}"
            ;;
        Darwin*)
            echo -e "${BLUE}üçé Sistema macOS detectado${NC}"
            
            # No macOS, verifica se o Homebrew est√° instalado
            if ! command_exists brew; then
                echo -e "${YELLOW}‚öôÔ∏è Homebrew n√£o encontrado, instalando...${NC}"
                /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            fi
            
            echo -e "${GREEN}‚úÖ Depend√™ncias do sistema configuradas${NC}"
            ;;
        *)
            echo -e "${YELLOW}‚ùì Sistema $OS detectado (n√£o testado oficialmente)${NC}"
            echo -e "${YELLOW}‚ö†Ô∏è Algumas depend√™ncias podem precisar ser instaladas manualmente${NC}"
            ;;
    esac
}

# Fun√ß√£o para configurar depend√™ncias Python
setup_python_dependencies() {
    echo -e "${BLUE}üêç Configurando depend√™ncias Python...${NC}"
    
    # Verifica se as depend√™ncias est√£o instaladas
    if python3 -c "import pyautogui, cv2, PIL" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Depend√™ncias Python j√° est√£o instaladas${NC}"
        return 0
    fi
    
    echo -e "${YELLOW}‚öôÔ∏è Instalando depend√™ncias Python...${NC}"
    
    if [ -f "requirements.txt" ]; then
        # Instala/atualiza pip se necess√°rio
        python3 -m pip install --upgrade pip --quiet
        
        # Instala depend√™ncias
        python3 -m pip install -r requirements.txt --quiet
        
        # Verifica se a instala√ß√£o foi bem-sucedida
        if python3 -c "import pyautogui, cv2, PIL" >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Depend√™ncias Python instaladas com sucesso${NC}"
        else
            echo -e "${RED}‚ùå Erro ao instalar depend√™ncias Python${NC}"
            exit 1
        fi
    else
        echo -e "${RED}‚ùå Arquivo requirements.txt n√£o encontrado!${NC}"
        exit 1
    fi
}

# Fun√ß√£o para verificar configura√ß√£o de imagens
check_images_configuration() {
    echo -e "${BLUE}üìÅ Verificando configura√ß√£o de imagens...${NC}"
    
    if [ ! -d "images" ]; then
        echo -e "${RED}‚ùå Diret√≥rio 'images' n√£o encontrado!${NC}"
        exit 1
    fi
    
    PNG_COUNT=$(find images -name "*.png" 2>/dev/null | wc -l)
    if [ "$PNG_COUNT" -eq 0 ]; then
        echo -e "${RED}‚ùå Nenhuma imagem PNG encontrada no diret√≥rio 'images'!${NC}"
        echo -e "${YELLOW}üîß Configure as imagens seguindo as instru√ß√µes do README.md${NC}"
        echo -e "${YELLOW}üìñ Consulte a se√ß√£o 'Configura√ß√£o Essencial' no README.md${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ $PNG_COUNT imagem(ns) encontrada(s)${NC}"
}

# Fun√ß√£o principal de configura√ß√£o
setup_environment() {
    echo -e "${BLUE}ÔøΩ CONFIGURA√á√ÉO AUTOM√ÅTICA DO AMBIENTE${NC}"
    echo -e "${BLUE}=====================================\n${NC}"
    
    setup_python
    setup_pip
    setup_system_dependencies
    setup_python_dependencies
    check_images_configuration
    
    echo -e "\n${GREEN}üéâ AMBIENTE CONFIGURADO COM SUCESSO!${NC}"
}

# Fun√ß√£o para exibir avisos e iniciar aplica√ß√£o
start_application() {
    echo -e "\n${YELLOW}‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  AVISO: Esta ferramenta automatiza cliques visuais!      ‚ö†Ô∏è${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Use APENAS em ambientes controlados!                    ‚ö†Ô∏è${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è${NC}"
    echo ""
    echo -e "${BLUE}üéÆ CONTROLES:${NC}"
    echo -e "   ‚Ä¢ ${GREEN}Ctrl+C${NC} = Parar execu√ß√£o"
    echo -e "   ‚Ä¢ ${GREEN}Mouse no canto superior esquerdo${NC} = Parada de emerg√™ncia"
    echo ""
    
    # Verifica se √© execu√ß√£o interativa ou autom√°tica
    if [ -t 0 ]; then
        # Terminal interativo - pergunta ao usu√°rio
        echo -e "${BLUE}‚ùì Deseja continuar? (s/N)${NC}"
        read -r response
        if [[ ! "$response" =~ ^[SsYy]$ ]]; then
            echo -e "${YELLOW}üõë Execu√ß√£o cancelada pelo usu√°rio${NC}"
            exit 0
        fi
    else
        # Execu√ß√£o n√£o-interativa - continua automaticamente
        echo -e "${YELLOW}ü§ñ Modo n√£o-interativo detectado - iniciando automaticamente...${NC}"
        sleep 2
    fi
    
    echo -e "${GREEN}üöÄ Iniciando ImageClicker...${NC}"
    echo "----------------------------------------"
    python3 main.py
}

# EXECU√á√ÉO PRINCIPAL
main() {
    # Verifica se o script est√° sendo executado como root
    if [ "$EUID" -eq 0 ]; then
        echo -e "${RED}‚ùå N√£o execute este script como root (sudo)${NC}"
        echo -e "${YELLOW}ÔøΩ Execute como usu√°rio normal. O sudo ser√° solicitado apenas quando necess√°rio.${NC}"
        exit 1
    fi
    
    # Configura o ambiente automaticamente
    setup_environment
    
    # Inicia a aplica√ß√£o
    start_application
}

# Chama a fun√ß√£o principal
main "$@"
